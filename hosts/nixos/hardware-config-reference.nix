# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
# re: ^^^^^^^^^^^ we're not doing that anymore :) but keep the old file here and reference
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = [
    "nvme"
    "ahci"
    "xhci_pci"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  boot.kernel.sysctl = {
    "fs.inotify.max_user_watches" = "524288";
    "fs.inotify.max_user_instances" = "512";
  };

  fileSystems."/" = {
    device = "rpool/nixos";
    fsType = "zfs";
    options = [
      "zfsutil"
      "X-mount.mkdir"
    ];
    neededForBoot = true;
  };

  fileSystems."/home" = {
    device = "rpool/nixos/home";
    fsType = "zfs";
    # options = [
    #   "zfsutil"
    #   "X-mount.mkdir"
    # ];
  };

  fileSystems."/nix" = {
    device = "rpool/nixos/nix";
    fsType = "zfs";
    options = [
      "zfsutil"
      "X-mount.mkdir"
    ];
  };

  fileSystems."/root" = {
    device = "rpool/nixos/root";
    fsType = "zfs";
    # options = [
    #   "zfsutil"
    #   "X-mount.mkdir"
    # ];
  };

  fileSystems."/usr" = {
    device = "rpool/nixos/usr";
    fsType = "zfs";
    options = [
      "zfsutil"
      "X-mount.mkdir"
    ];
  };

  fileSystems."/var" = {
    device = "rpool/nixos/var";
    fsType = "zfs";
    options = [
      "zfsutil"
      "X-mount.mkdir"
    ];
  };

  fileSystems."/boot" = {
    device = "bpool/nixos/boot";
    fsType = "zfs";
    options = [
      "zfsutil"
      "X-mount.mkdir"
    ];
    neededForBoot = true;
  };

  fileSystems."/boot/efis/efiboot0" = {
    device = "/dev/disk/by-uuid/F3CB-38F8";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efis/efiboot1" = {
    device = "/dev/disk/by-uuid/F3CC-A796";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efis/efiboot2" = {
    device = "/dev/disk/by-uuid/F3CE-4267";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efis/efiboot3" = {
    device = "/dev/disk/by-uuid/F3D0-1FDC";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efis/efiboot4" = {
    device = "/dev/disk/by-uuid/F3D1-4A0D";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efis/efiboot5" = {
    device = "/dev/disk/by-uuid/F3D2-6E9C";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/boot/efi" = {
    device = "/boot/efis/efiboot0";
    fsType = "none";
    options = [ "bind" ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/1c16a07d-394b-4302-9e4c-eabda8c6c7f7"; }
    { device = "/dev/disk/by-uuid/d30a67e9-0974-4bb3-91ec-299898b6d7dc"; }
    { device = "/dev/disk/by-uuid/bea2f3c6-1b79-476e-9ee4-799bf662891c"; }
    { device = "/dev/disk/by-uuid/9e9ae910-0b32-4954-9da3-b0e6b2d6f334"; }
    { device = "/dev/disk/by-uuid/6a3390c7-2d71-4a20-aed9-94569bd32e84"; }
    { device = "/dev/disk/by-uuid/76aa3648-af34-4bd1-bcd6-6529802fc054"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp12s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp13s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
