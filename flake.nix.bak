{
  description = "Example nix-darwin system flake";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";
    home-manager.url = "github:nix-community/home-manager";
    home-manager.inputs.nixpkgs.follows = "nixpkgs";
    alacritty-theme.url = "github:alexghr/alacritty-theme.nix";
  };

  outputs =
    inputs@{
      self,
      nixpkgs,
      home-manager,
      alacritty-theme,
    }:
    let
      users = {
	le = {
          name = "le";
          homeModules = ./home/users/mitchell;
        };
        k8s = {
          name = "k8s";
          homeModules = ./users/k8s.nix;
        };
      };
#      configuration =
#        { pkgs, ... }:
#        {
#
#          # List packages installed in system profile. To search by name, run:
#          # $ nix-env -qaP | grep wget
#          environment.systemPackages = [
#            pkgs.vim
#          ];
#          # Auto upgrade nix package and the daemon service.
#          services.nix-daemon.enable = true;
#          # nix.package = pkgs.nix;
#
#          # Necessary for using flakes on this system.
#          nix.settings.experimental-features = "nix-command flakes";
#          nix.settings.trusted-users = [
#            "root"
#            "le"
#          ];
#          nix.gc = {
#            user = "root";
#            automatic = true;
#            interval = {
#              Weekday = 0;
#              Hour = 2;
#              Minute = 0;
#            };
#            options = "--delete-older-than 30d";
#          };
#
#          # Enable alternative shell support in nix-darwin.
#          # programs.fish.enable = true;
#          # Set Git commit hash for darwin-version.
#          system.configurationRevision = self.rev or self.dirtyRev or null;
#
#          # The platform the configuration will be used on.
##          nixpkgs.hostPlatform = "aarch64-darwin";

#        };
    in
    {
    outputs = inputs@{ nixpkgs, home-manager, ... }: { 
nixosConfigurations = {
      hostname = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [
#          ./configuration.nix
          ./hosts/${ builtins.getEnv "HOSTNAME" }
          home-manager.nixosModules.home-manager
          {
            home-manager.useGlobalPkgs = true;
            home-manager.useUserPackages = true;
            home-manager.users.le = import ./home/users/le;

            # Optionally, use home-manager.extraSpecialArgs to pass
            # arguments to home.nix
          }
        ];
      };
    };

#      nixosConfigurations = nixpkgs.lib.genAttrs linuxSystems (
#        system:
#        nixpkgs.lib.nixosSystem {
#          inherit system;
#          specialArgs = inputs;
#          modules = [
#            # overlays
#            (
#              { config, pkgs, ... }:
#              {
#                nixpkgs.overlays = [ alacritty-theme.overlays.default ];
#              }
#            )
#            home-manager.nixosModules.home-manager
#            {
#              home-manager = {
#                useGlobalPkgs = true;
#                useUserPackages = true;
#                users.le = import ./users/le.nix;
#		users.k8s = import ./users/k8s.nix;
#              };
#            }
#            ./hosts/nixos
#          ];
#        }
#      );

#      home-manager.users.le =
#        { pkgs, ... }:
#        {
#          home.packages = [
#            pkgs.atool
#            pkgs.httpie
#          ];
#          programs.bash.enable = true;
#
#          # The state version is required and should stay at the version you
#          # originally installed.
#          home.stateVersion = "25.05";
#        };
    };
};
}
